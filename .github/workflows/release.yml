name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: featherbox-linux-x86_64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: featherbox-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: featherbox-macos-aarch64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: featherbox-windows-x86_64.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust (Unix)
        if: runner.os != 'Windows'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          rustup target add ${{ matrix.target }}
      
      - name: Install Rust (Windows)
        if: runner.os == 'Windows'
        run: |
          Invoke-WebRequest -Uri "https://win.rustup.rs/" -OutFile "rustup-init.exe"
          .\rustup-init.exe -y --default-toolchain stable
          rustup target add ${{ matrix.target }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build UI
        run: |
          echo "Building UI with npm..."
          cd src/ui
          npm install
          npm run build
          echo "UI built successfully"

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package Artifact (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          cp fbox featherbox
          tar -czvf ../../../${{ matrix.asset_name }} featherbox

      - name: Package Artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Copy-Item -Path fbox.exe -Destination featherbox.exe
          Compress-Archive -Path featherbox.exe -DestinationPath ../../../${{ matrix.asset_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

